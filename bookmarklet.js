// Generated by CoffeeScript 1.3.3
(function() {
  var SITE_URL, SubtlePatternsOverlay, delay, load_css, load_rss, load_script, load_subtle_patterns;

  SITE_URL = "127.0.0.1:8000";

  delay = function(ms, fn) {
    return setTimeout(fn, ms);
  };

  String.prototype.beginsWith = function(str) {
    if (this.match(new RegExp("^" + str))) {
      return true;
    } else {
      return false;
    }
  };

  String.prototype.endsWith = function(str) {
    if (this.match(new RegExp("" + str + "$"))) {
      return true;
    } else {
      return false;
    }
  };

  load_script = function(url, callback) {
    "Load a script from a remote URL...with a callback when it's complete";

    var script;
    script = document.createElement("script");
    script.type = "text/javascript";
    if (script.readyState) {
      script.onreadystatechange = function() {
        if (script.readyState === "loaded" || script.readyState === "complete") {
          script.onreadystatechange = null;
          return callback();
        }
      };
    } else {
      script.onload = function() {
        return callback();
      };
    }
    script.src = url;
    return document.getElementsByTagName("head")[0].appendChild(script);
  };

  load_css = function(url) {
    "Load CSS from a remote URL";

    var style;
    style = document.createElement("link");
    style.setAttribute("rel", "stylesheet");
    style.setAttribute("type", "text/css");
    style.setAttribute("href", url);
    return document.getElementsByTagName("head")[0].appendChild(style);
  };

  load_rss = function(url, success) {
    "Leverage Google's AJAX API to turn an RSS feed into JSON";
    return $.ajax({
      url: document.location.protocol + '//ajax.googleapis.com/ajax/services/feed/load?v=1.0&num=1000&callback=?&q=' + encodeURIComponent(url),
      dataType: 'json',
      success: function(data) {
        if (data.responseStatus === 200) {
          return success(data);
        } else {
          return alert("There was an error loading the RSS feed " + url);
        }
      }
    });
  };

  load_subtle_patterns = function(success) {
    "Load patterns from SubtlePatterns via RSS";
    return load_rss("http://feeds.feedburner.com/SubtlePatterns", function(data) {
      var entry, img, patterns, _i, _len, _ref;
      patterns = [];
      _ref = data.responseData.feed.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        img = $("<div>").html(entry.content).find("img[src$='.png']").attr("src");
        if (img) {
          patterns.push({
            img: img,
            title: entry.title,
            link: entry.link,
            categories: entry.categories.slice(1)
          });
        }
      }
      return success(patterns);
    });
  };

  SubtlePatternsOverlay = (function() {
    "This is the overlay the user see's and uses to control patterns\n\nThis could use Knockout or Backbone, but since it's a bookmarklet we'll keep it light";

    function SubtlePatternsOverlay(patterns) {
      this.patterns = patterns;
      this.curr = 0;
    }

    SubtlePatternsOverlay.prototype.setup = function() {
      this.create();
      this.setup_events();
      return this.update();
    };

    SubtlePatternsOverlay.prototype.show = function() {
      return this.el.show();
    };

    SubtlePatternsOverlay.prototype.hide = function() {
      return this.el.hide();
    };

    SubtlePatternsOverlay.prototype.create = function() {
      var _this = this;
      this.el = $("<div>", {
        id: "subtle_overlay"
      });
      $("<a>", {
        "href": "#",
        "class": "previous"
      }).html("←").appendTo(this.el).click(function() {
        return _this.previous();
      });
      $("<span>", {
        "class": "index"
      }).appendTo(this.el);
      $("<a>", {
        "href": "#",
        "class": "next"
      }).html("→").appendTo(this.el).click(function() {
        return _this.next();
      });
      $("<span>", {
        "class": "title"
      }).appendTo(this.el);
      return this.el.appendTo("body");
    };

    SubtlePatternsOverlay.prototype.setup_events = function() {
      var _this = this;
      return $(document).keydown(function(e) {
        switch (e.keyCode) {
          case 37:
            return _this.previous();
          case 39:
            return _this.next();
        }
      });
    };

    SubtlePatternsOverlay.prototype.next = function() {
      if (this.curr < this.patterns.length - 1) {
        this.curr += 1;
        return this.update();
      }
    };

    SubtlePatternsOverlay.prototype.previous = function() {
      if (this.curr > 0) {
        this.curr -= 1;
        return this.update();
      } else {
        return this.curr = this.patterns.length - 1;
      }
    };

    SubtlePatternsOverlay.prototype.current_pattern = function() {
      return this.patterns[this.curr];
    };

    SubtlePatternsOverlay.prototype.update = function() {
      var pattern;
      pattern = this.current_pattern();
      $("body").css("background-image", "url('" + pattern.img + "')");
      $("body").css("background-repeat", "repeat");
      this.el.find(".index").html("" + (this.curr + 1) + "/" + this.patterns.length);
      return this.el.find(".title").html("<a target='_blank' href='" + pattern.link + "'>" + pattern.title + "</a>");
    };

    return SubtlePatternsOverlay;

  })();

  load_script("https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js", function() {
    load_css("http://" + SITE_URL + "/bookmarklet.css");
    return load_subtle_patterns(function(patterns) {
      return new SubtlePatternsOverlay(patterns).setup();
    });
  });

}).call(this);
