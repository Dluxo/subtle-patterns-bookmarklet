// Generated by CoffeeScript 1.3.3
(function() {
  var delay, load_rss, load_script, main, show_patterns;

  delay = function(ms, fn) {
    return setTimeout(fn, ms);
  };

  String.prototype.beginsWith = function(str) {
    if (this.match(new RegExp("^" + str))) {
      return true;
    } else {
      return false;
    }
  };

  String.prototype.endsWith = function(str) {
    if (this.match(new RegExp("" + str + "$"))) {
      return true;
    } else {
      return false;
    }
  };

  window.log = function() {
    log.history = log.history || [];
    log.history.push(arguments);
    if (this.console) {
      arguments.callee = arguments.callee.caller;
      return console.log(Array.prototype.slice.call(arguments));
    }
  };

  (function(b) {
    var a, c, d, _results;
    c = function() {};
    d = "assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,time,timeEnd,trace,warn".split(",");
    _results = [];
    while (a = d.pop()) {
      _results.push(b[a] = b[a] || c);
    }
    return _results;
  })(window.console = window.console || {});

  load_script = function(url, callback) {
    "Load a script from a remote URL...with a callback when it's complete";

    var script;
    script = document.createElement("script");
    script.type = "text/javascript";
    if (script.readyState) {
      script.onreadystatechange = function() {
        if (script.readyState === "loaded" || script.readyState === "complete") {
          script.onreadystatechange = null;
          return callback();
        }
      };
    } else {
      script.onload = function() {
        return callback();
      };
    }
    script.src = url;
    return document.getElementsByTagName("head")[0].appendChild(script);
  };

  load_rss = function(url, success) {
    return $.ajax({
      url: document.location.protocol + '//ajax.googleapis.com/ajax/services/feed/load?v=1.0&num=1000&callback=?&q=' + encodeURIComponent(url),
      dataType: 'json',
      success: function(data) {
        if (data.responseStatus === 200) {
          return success(data);
        } else {
          return alert("There was an error loading the RSS feed " + url);
        }
      }
    });
  };

  show_patterns = function(patterns) {
    var index, next, prev, setup, update;
    index = 0;
    next = function() {
      if (index < patterns.length - 1) {
        index += 1;
        return update();
      }
    };
    prev = function() {
      if (index > 0) {
        index -= 1;
        return update();
      } else {
        return index = patterns.length - 1;
      }
    };
    update = function() {
      var pattern;
      pattern = patterns[index];
      $("body").css("background-image", "url('" + pattern.img + "')");
      $("body").css("background-repeat", "repeat");
      return $("#subtlepatterns_bookmarklet").html("SubtlePattern: <a target='_blank' href='" + pattern.link + "'>" + pattern.title + "</a>");
    };
    setup = function() {
      var loading;
      loading = $("<div>", {
        id: "subtlepatterns_bookmarklet"
      }).html("Loading...");
      loading.css("z-index", "100");
      loading.css("background", "#fefefe");
      loading.css("position", "fixed");
      loading.css("padding", "10px");
      loading.css("bottom", "0px");
      loading.css("left", "0px");
      loading.appendTo("body");
      return $(document).keydown(function(e) {
        switch (e.keyCode) {
          case 37:
            return prev();
          case 39:
            return next();
        }
      });
    };
    setup();
    return update();
  };

  main = function() {
    var subtle_feed;
    subtle_feed = "http://feeds.feedburner.com/SubtlePatterns";
    return load_rss(subtle_feed, function(data) {
      var entry, img, patterns, _i, _len, _ref;
      patterns = [];
      _ref = data.responseData.feed.entries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entry = _ref[_i];
        img = $("<div>").html(entry.content).find("img[src$='.png']").attr("src");
        if (img) {
          patterns.push({
            img: img,
            title: entry.title,
            link: entry.link,
            categories: entry.categories.slice(1)
          });
        }
      }
      return show_patterns(patterns);
    });
  };

  load_script("https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js", function() {
    return main();
  });

}).call(this);
